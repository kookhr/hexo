<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何通过 Hexo 和 GitHub Actions 实现自动发布博客 🚀</title>
      <link href="/2025/08/07/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%20Hexo%20%E5%92%8C%20GitHub%20Actions%20%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%20%F0%9F%9A%80/"/>
      <url>/2025/08/07/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%20Hexo%20%E5%92%8C%20GitHub%20Actions%20%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%20%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<h1 id="如何通过-Hexo-和-GitHub-Actions-实现自动发布博客-🚀"><a href="#如何通过-Hexo-和-GitHub-Actions-实现自动发布博客-🚀" class="headerlink" title="如何通过 Hexo 和 GitHub Actions 实现自动发布博客 🚀"></a>如何通过 Hexo 和 GitHub Actions 实现自动发布博客 🚀</h1><p>你是否希望自动化发布你的 Hexo 博客，而无需手动操作每次更新？本文将详细介绍如何使用 GitHub Actions 自动化部署你的 Hexo 博客。即使你是小白，也能通过以下步骤轻松上手！📝</p><p><img src="https://im.kandy.dpdns.org/file/1112a15baceab51d59a32.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;1112a15baceab51d59a32.png"></p><h2 id="前提条件-🌟"><a href="#前提条件-🌟" class="headerlink" title="前提条件 🌟"></a>前提条件 🌟</h2><p>在开始之前，你需要以下几个条件：</p><ol><li><strong>Hexo 博客系统</strong>: 在你的电脑上已经安装并配置好了 Hexo 博客。</li><li><strong>GitHub 账户</strong>: 你需要一个 GitHub 账户，并在 GitHub 上创建一个用于存储博客代码的仓库。</li><li><strong>GitHub Pages</strong>: 用于托管你的网站页面的服务，GitHub Pages 是免费的。</li><li><strong>基本的 Git 知识</strong>: 了解如何使用 Git 进行版本控制和提交代码。</li></ol><h2 id="步骤-1-配置-Hexo-博客-📚"><a href="#步骤-1-配置-Hexo-博客-📚" class="headerlink" title="步骤 1: 配置 Hexo 博客 📚"></a>步骤 1: 配置 Hexo 博客 📚</h2><h3 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h3><p>如果你还没有安装 Hexo，可以按照以下步骤进行安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后，初始化一个新的 Hexo 博客项目：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="2-部署到-GitHub"><a href="#2-部署到-GitHub" class="headerlink" title="2. 部署到 GitHub"></a>2. 部署到 GitHub</h3><p>将你的 Hexo 博客推送到 GitHub 上的仓库：</p><ol><li><p>在 GitHub 上创建一个新的仓库，命名为 <code>my-blog</code>。</p></li><li><p>在本地项目目录中初始化 Git 并添加远程仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/你的用户名/my-blog.git</span><br></pre></td></tr></table></figure></li><li><p>提交并推送代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤-2-创建-GitHub-Actions-工作流-🔄"><a href="#步骤-2-创建-GitHub-Actions-工作流-🔄" class="headerlink" title="步骤 2: 创建 GitHub Actions 工作流 🔄"></a>步骤 2: 创建 GitHub Actions 工作流 🔄</h2><h3 id="1-创建工作流目录"><a href="#1-创建工作流目录" class="headerlink" title="1. 创建工作流目录"></a>1. 创建工作流目录</h3><p>在你的 GitHub 仓库中，创建一个目录用于存放 GitHub Actions 的配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p .github/workflows</span><br></pre></td></tr></table></figure><p><img src="https://im.kandy.dpdns.org/file/7f733dc035bc7d2a50af5.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;7f733dc035bc7d2a50af5.png"></p><h3 id="2-添加工作流配置文件"><a href="#2-添加工作流配置文件" class="headerlink" title="2. 添加工作流配置文件"></a>2. 添加工作流配置文件</h3><p>在 <code>.github/workflows</code> 目录中，创建一个名为 <code>deploy.yml</code> 的文件，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span> <span class="comment"># 选择 Node.js 的版本</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><h3 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h3><ul><li><code>name</code>: 定义工作流的名称。</li><li><code>on</code>: 触发工作流的条件，这里设置为当 <code>main</code> 分支有新的提交时触发。</li><li><code>jobs</code>: 定义一个作业，这里是 <code>deploy</code> 作业。</li><li><code>steps</code>: 作业中的步骤，包括：<ul><li><code>Checkout code</code>: 检出代码到工作环境。</li><li><code>Setup Node.js</code>: 设置 Node.js 环境。</li><li><code>Install dependencies</code>: 安装 Hexo 依赖。</li><li><code>Build Hexo</code>: 构建 Hexo 博客。</li><li><code>Deploy to GitHub Pages</code>: 将生成的博客内容发布到 GitHub Pages。</li></ul></li></ul><h2 id="步骤-3-配置-GitHub-Pages-🌐"><a href="#步骤-3-配置-GitHub-Pages-🌐" class="headerlink" title="步骤 3: 配置 GitHub Pages 🌐"></a>步骤 3: 配置 GitHub Pages 🌐</h2><ol><li>打开你的 GitHub 仓库页面，点击 <strong>Settings</strong>。</li><li>在左侧菜单中选择 <strong>Pages</strong>。</li><li>在 <strong>Source</strong> 部分，选择 <code>gh-pages</code> 分支，并点击 <strong>Save</strong>。</li></ol><p>这样设置后，GitHub Pages 就会从 <code>gh-pages</code> 分支中读取你的博客内容并进行展示。</p><h2 id="步骤-4-提交更改并触发自动发布-🔧"><a href="#步骤-4-提交更改并触发自动发布-🔧" class="headerlink" title="步骤 4: 提交更改并触发自动发布 🔧"></a>步骤 4: 提交更改并触发自动发布 🔧</h2><ol><li><p>在本地项目目录中，提交你对 <code>deploy.yml</code> 文件的更改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .github/workflows/deploy.yml</span><br><span class="line">git commit -m <span class="string">&quot;Add GitHub Actions workflow for deployment&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li><li><p>当你推送到 <code>main</code> 分支时，GitHub Actions 会自动触发，执行配置好的工作流，并将你的博客内容发布到 GitHub Pages。</p></li></ol><h2 id="总结-🏆"><a href="#总结-🏆" class="headerlink" title="总结 🏆"></a>总结 🏆</h2><p>通过以上步骤，你已经成功配置了 Hexo 和 GitHub Actions 实现自动化博客发布。每次你更新博客内容并推送到 <code>main</code> 分支时，GitHub Actions 会自动构建并部署你的博客，无需手动操作。这样，你可以更专注于创作内容，而不是部署过程。</p><p>希望这篇文章对你有帮助！如果你有任何问题或建议，欢迎在评论区留言。😊</p><hr><p>喜欢这篇文章？别忘了给我点个 👍 和关注哦！✨</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>🎯通过Cloudflare-workers部署GitHub上的项目</title>
      <link href="/2025/07/12/workers%20%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/07/12/workers%20%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>通过Cloudflare网站界面部署GitHub上的环境管理系统</p><h2 id="🎯-部署概览"><a href="#🎯-部署概览" class="headerlink" title="🎯 部署概览"></a>🎯 部署概览</h2><p>GitHub仓库 → Cloudflare Dashboard → Workers Builds → 自动部署</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 📋 前置准备</span><br><span class="line"></span><br><span class="line">### 确认GitHub仓库状态</span><br><span class="line">- ✅ 代码已推送到GitHub</span><br><span class="line">- ✅ 包含 `wrangler.toml` 配置文件</span><br><span class="line">- ✅ 包含 `src/worker.js` Worker代码</span><br><span class="line">- ✅ 包含构建后的 `dist/` 目录（或能够构建）</span><br><span class="line"></span><br><span class="line">### 确认Cloudflare账户</span><br><span class="line">- ✅ 已登录Cloudflare Dashboard</span><br><span class="line">- ✅ 账户有Workers权限</span><br><span class="line"></span><br><span class="line">## 🚀 第一步：创建Workers项目</span><br><span class="line"></span><br><span class="line">### 1.1 进入Workers &amp; Pages</span><br><span class="line">1. 登录 [Cloudflare Dashboard](https://dash.cloudflare.com)</span><br><span class="line">2. 在左侧菜单选择 **&quot;Workers &amp; Pages&quot;**</span><br><span class="line">3. 点击 **&quot;Create application&quot;** 按钮</span><br><span class="line"></span><br><span class="line">### 1.2 选择创建方式</span><br><span class="line">1. 在弹出页面中选择 **&quot;Workers&quot;** 标签</span><br><span class="line">2. 点击 **&quot;Create Worker&quot;** 按钮</span><br><span class="line"></span><br><span class="line">### 1.3 配置Worker基本信息</span><br></pre></td></tr></table></figure><p>Worker名称: environment-manager</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 输入Worker名称：`environment-manager`</span><br><span class="line">2. 点击 **&quot;Deploy&quot;** 按钮</span><br><span class="line"></span><br><span class="line">## 🔗 第二步：连接GitHub仓库</span><br><span class="line"></span><br><span class="line">### 2.1 进入Worker设置</span><br><span class="line">1. Worker创建成功后，进入Worker详情页面</span><br><span class="line">2. 点击 **&quot;Settings&quot;** 标签</span><br><span class="line">3. 选择 **&quot;Builds&quot;** 部分</span><br><span class="line"></span><br><span class="line">### 2.2 连接Git仓库</span><br><span class="line">1. 点击 **&quot;Connect to Git&quot;** 按钮</span><br><span class="line">2. 选择 **&quot;GitHub&quot;** 作为Git提供商</span><br><span class="line">3. 如果首次使用，需要授权Cloudflare访问GitHub</span><br><span class="line"></span><br><span class="line">### 2.3 授权GitHub访问</span><br><span class="line">1. 在GitHub授权页面，选择要授权的仓库</span><br><span class="line">2. 可以选择 **&quot;All repositories&quot;** 或 **&quot;Selected repositories&quot;**</span><br><span class="line">3. 如果选择特定仓库，找到您的环境管理系统仓库</span><br><span class="line">4. 点击 **&quot;Install &amp; Authorize&quot;**</span><br><span class="line"></span><br><span class="line">### 2.4 选择仓库和分支</span><br><span class="line">1. 返回Cloudflare页面后，选择您的仓库</span><br><span class="line">2. **重要：选择 `workers` 分支**（不是main分支）</span><br><span class="line">3. 点击 **&quot;Begin setup&quot;**</span><br><span class="line"></span><br><span class="line">## ⚙️ 第三步：配置构建设置</span><br><span class="line"></span><br><span class="line">### 3.1 基本构建配置</span><br></pre></td></tr></table></figure><p>Project name: environment-manager<br>Production branch: main<br>Framework preset: None (或 Vite)<br>Build command: npm run build<br>Build output directory: dist<br>Root directory: &#x2F; (留空)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3.2 详细配置步骤</span><br><span class="line">1. **Project name**: 确认为 `environment-manager`</span><br><span class="line">2. **Production branch**: **选择 `main`**</span><br><span class="line">3. **Framework preset**: 选择 `None` 或 `Vite`</span><br><span class="line">4. **Build command**: 输入 `npm run build`</span><br><span class="line">5. **Build output directory**: 输入 `dist`</span><br><span class="line">6. **Root directory**: 留空（表示根目录）</span><br><span class="line"></span><br><span class="line">### 3.3 环境变量配置</span><br><span class="line">在 **&quot;Environment variables&quot;** 部分添加：</span><br></pre></td></tr></table></figure><p>NODE_VERSION &#x3D; 18<br>ENVIRONMENT &#x3D; production</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">点击 **&quot;Add variable&quot;** 按钮添加每个变量。</span><br><span class="line"></span><br><span class="line">## 🗄️ 第四步：创建KV存储</span><br><span class="line"></span><br><span class="line">### 4.1 创建KV命名空间</span><br><span class="line">1. 在Cloudflare Dashboard左侧菜单选择 **&quot;Workers &amp; Pages&quot;**</span><br><span class="line">2. 点击 **&quot;KV&quot;** 标签</span><br><span class="line">3. 点击 **&quot;Create a namespace&quot;** 按钮</span><br><span class="line">4. 输入命名空间名称：`ENV_CONFIG`</span><br><span class="line">5. 点击 **&quot;Add&quot;** 按钮</span><br><span class="line"></span><br><span class="line">### 4.2 记录命名空间ID</span><br><span class="line">创建成功后，页面会显示：</span><br></pre></td></tr></table></figure><p>Namespace ID: abcd1234-5678-90ef-ghij-klmnopqrstuv</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**重要：请复制并保存这个ID，稍后需要用到**</span><br><span class="line"></span><br><span class="line">## 🔧 第五步：配置Worker绑定</span><br><span class="line"></span><br><span class="line">### 5.1 返回Worker设置</span><br><span class="line">1. 回到您的Worker详情页面</span><br><span class="line">2. 点击 **&quot;Settings&quot;** 标签</span><br><span class="line">3. 选择 **&quot;Variables&quot;** 部分</span><br><span class="line"></span><br><span class="line">### 5.2 添加KV绑定</span><br><span class="line">1. 在 **&quot;KV Namespace Bindings&quot;** 部分</span><br><span class="line">2. 点击 **&quot;Add binding&quot;** 按钮</span><br><span class="line">3. 配置绑定：</span><br></pre></td></tr></table></figure><p>Variable name: ENV_CONFIG<br>KV namespace: 选择刚创建的 ENV_CONFIG 命名空间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 点击 **&quot;Save&quot;** 按钮</span><br><span class="line"></span><br><span class="line">### 5.3 添加环境变量（可选）</span><br><span class="line">在 **&quot;Environment Variables&quot;** 部分可以添加：</span><br></pre></td></tr></table></figure><p>ENVIRONMENT &#x3D; production<br>APP_VERSION &#x3D; 2.0.0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 🚀 第六步：触发首次部署</span><br><span class="line"></span><br><span class="line">### 6.1 手动触发部署</span><br><span class="line">1. 回到Worker的 **&quot;Builds&quot;** 设置页面</span><br><span class="line">2. 点击 **&quot;Trigger deployment&quot;** 按钮</span><br><span class="line">3. 或者推送新代码到GitHub触发自动部署</span><br><span class="line"></span><br><span class="line">### 6.2 监控部署进度</span><br><span class="line">1. 在 **&quot;Deployments&quot;** 标签查看部署状态</span><br><span class="line">2. 可以查看构建日志和部署详情</span><br><span class="line">3. 等待部署完成（通常需要1-3分钟）</span><br><span class="line"></span><br><span class="line">## ✅ 第七步：验证部署</span><br><span class="line"></span><br><span class="line">### 7.1 获取Worker URL</span><br><span class="line">1. 在Worker详情页面顶部可以看到Worker URL</span><br><span class="line">2. 格式通常为：`https://environment-manager.your-subdomain.workers.dev`</span><br><span class="line"></span><br><span class="line">### 7.2 测试功能</span><br><span class="line">1. **访问主页**：直接访问Worker URL</span><br><span class="line">2. **测试API**：访问 `https://your-worker-url/api/health`</span><br><span class="line">3. **测试KV**：访问 `https://your-worker-url/api/kv?action=test`</span><br><span class="line"></span><br><span class="line">### 7.3 功能验证清单</span><br><span class="line">- [ ] 主页正常显示</span><br><span class="line">- [ ] 静态资源加载正常</span><br><span class="line">- [ ] API端点响应正常</span><br><span class="line">- [ ] KV存储连接成功</span><br><span class="line">- [ ] 环境管理功能正常</span><br><span class="line"></span><br><span class="line">## 🔄 第八步：设置自动部署</span><br><span class="line"></span><br><span class="line">### 8.1 配置Webhook（自动完成）</span><br><span class="line">连接GitHub后，Cloudflare会自动配置Webhook，实现：</span><br><span class="line">- 推送到主分支自动部署</span><br><span class="line">- Pull Request预览部署</span><br><span class="line">- 部署状态回传到GitHub</span><br><span class="line"></span><br><span class="line">### 8.2 分支部署策略</span><br></pre></td></tr></table></figure><p>workers分支 → 生产环境自动部署<br>其他分支 → 可配置为预览环境<br>Pull Request → 自动创建预览部署</p><h2 id="📊-第九步：监控和管理"><a href="#📊-第九步：监控和管理" class="headerlink" title="📊 第九步：监控和管理"></a>📊 第九步：监控和管理</h2><h3 id="9-1-查看部署历史"><a href="#9-1-查看部署历史" class="headerlink" title="9.1 查看部署历史"></a>9.1 查看部署历史</h3><ol><li>在Worker详情页面点击 <strong>“Deployments”</strong> 标签</li><li>查看所有部署记录和状态</li><li>可以回滚到任意历史版本</li></ol><h3 id="9-2-查看实时日志"><a href="#9-2-查看实时日志" class="headerlink" title="9.2 查看实时日志"></a>9.2 查看实时日志</h3><ol><li>点击 <strong>“Logs”</strong> 标签</li><li>点击 <strong>“Begin log stream”</strong> 开始查看实时日志</li><li>监控Worker运行状态和错误信息</li></ol><h3 id="9-3-查看分析数据"><a href="#9-3-查看分析数据" class="headerlink" title="9.3 查看分析数据"></a>9.3 查看分析数据</h3><ol><li>点击 <strong>“Analytics”</strong> 标签</li><li>查看请求量、响应时间、错误率等指标</li><li>分析Worker性能和使用情况</li></ol><h2 id="📋-部署检查清单"><a href="#📋-部署检查清单" class="headerlink" title="📋 部署检查清单"></a>📋 部署检查清单</h2><p>完成部署前请确认：</p><ul><li><input disabled="" type="checkbox"> GitHub仓库代码最新</li><li><input disabled="" type="checkbox"> Worker项目已创建</li><li><input disabled="" type="checkbox"> GitHub仓库已连接</li><li><input disabled="" type="checkbox"> 构建设置已配置</li><li><input disabled="" type="checkbox"> KV命名空间已创建</li><li><input disabled="" type="checkbox"> KV绑定已配置</li><li><input disabled="" type="checkbox"> 首次部署已完成</li><li><input disabled="" type="checkbox"> Worker URL可访问</li><li><input disabled="" type="checkbox"> 所有功能测试通过</li><li><input disabled="" type="checkbox"> 自动部署已启用</li></ul><h2 id="🎉-部署完成"><a href="#🎉-部署完成" class="headerlink" title="🎉 部署完成"></a>🎉 部署完成</h2><p>恭喜！您已成功通过Cloudflare Dashboard完成了环境管理系统的部署。</p><p><strong>现在您拥有：</strong></p><ul><li>🌍 全球边缘网络部署</li><li>⚡ 零冷启动性能</li><li>🔄 GitHub自动部署</li><li>📊 实时监控和日志</li><li>🛡️ 企业级安全性</li></ul><p><strong>下一步操作：</strong></p><ol><li>配置自定义域名（可选）</li><li>设置监控告警</li><li>优化性能配置</li><li>培训团队使用</li></ol><p><strong>重要提醒：</strong></p><ul><li>保存Worker URL以便访问</li><li>定期检查部署状态</li><li>监控资源使用情况</li><li>及时更新依赖版本</li></ul>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> workers </tag>
            
            <tag> 静态 </tag>
            
            <tag>  KV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]基于DeepSeek赋能运维场景探讨</title>
      <link href="/2025/02/18/%5B%E8%BD%AC%5D%E5%9F%BA%E4%BA%8EDeepSeek%E8%B5%8B%E8%83%BD%E8%BF%90%E7%BB%B4%E5%9C%BA%E6%99%AF%E6%8E%A2%E8%AE%A8/"/>
      <url>/2025/02/18/%5B%E8%BD%AC%5D%E5%9F%BA%E4%BA%8EDeepSeek%E8%B5%8B%E8%83%BD%E8%BF%90%E7%BB%B4%E5%9C%BA%E6%99%AF%E6%8E%A2%E8%AE%A8/</url>
      
        <content type="html"><![CDATA[<p>DeepSeek作为一个现象级的技术热点在持续发酵，相关的资料很多，有介绍DeepSeek使用入门到精通、DeepSeek如何部署、DeepSeek的技术原理和实现是如何做到性价比最优等等。各行各业也争先恐后的宣布接入DeepSeek大模型，本文结合实际的运维工作中，如何借助DeepSeek来赋能实际的运维工作，有哪些运维场景进行了探讨。</p><p><img src="https://myim.kandy.us.kg/tutu/Qexo/25/2/37547c7d0e251787a773cd1ad21da7fd.png"></p><hr><h4 id="1、为什么是DeepSeek"><a href="#1、为什么是DeepSeek" class="headerlink" title="1、为什么是DeepSeek"></a>1、为什么是DeepSeek</h4><h5 id="1-1-DeepSeek大模型的优势"><a href="#1-1-DeepSeek大模型的优势" class="headerlink" title="1.1 DeepSeek大模型的优势"></a>1.1 DeepSeek大模型的优势</h5><p>DeepSeek V3&#x2F;R1大模型之所以在发布后能够引起全行业的轰动以及全民的探讨热度，个人认为主要是开源免费后能够在本地化部署以及开放的API接口调用、和同类大模型性能相当的情况之下做到训练和推理成本更低以及中文语义的理解和上下文推理能力。</p><p>1）开源免费</p><p>相比较国内外多数大模型采用闭源或者有限开放的方式，DeepSeek R1采用MIT许可协议，允许用户免费商用、任意修改和衍生开发。这种开放性打破了传统闭源模型的垄断，降低了技术使用门槛，使中小企业和开发者能够基于R1进行二次开发，无需支付高昂的授权费用。同时开源了全系列模型（1.5B至70B参数），并适配多种硬件架构（如NVIDIA PTX编程、存算一体芯片），支持本地化部署，甚至在普通笔记本上都可以部署运行自己的小模型。截止到目前国内外有包括阿里云、华为云、腾讯云、AWS、微软等云厂商提供DeepSeek R1的服务，并且有160多家国内外企业宣布加入DeepSeek生态，涵盖AI芯片、云计算、终端应用等领域。</p><p>2）性能相当下的低训推成本</p><p>通过优化算法（如强化学习、专家混合架构）和训练流程，R1大幅降低了训练和推理的算力需求。DeepSeek R1模型在数学与逻辑推理、代码生成和物理模拟等测试验证过程中表现出极优的性能，而这些的训练和推理成本只有同类大模型的几十分之一。这为本地化部署大模型并进行专业领域的大模型训练提供了可能，降低了部署和推广使用的成本。</p><p>3）强化学习推理能力</p><p>DeepSeek R1模型在中文语义的理解和总结上相比其它模型，能结合数据与实例生成可靠内容、解析中文复杂句式中的指代关系和隐含逻辑。从开放的思维链能够看出推理的过程更为接近人类的思考过程，甚至有自我反思和推断。</p><h5 id="1-2-本地化运维领域专业大模型构建"><a href="#1-2-本地化运维领域专业大模型构建" class="headerlink" title="1.2 本地化运维领域专业大模型构建"></a>1.2 本地化运维领域专业大模型构建</h5><p>基于现有通用大模型构建本地化的专业大模型，其实是一个系统性的工程，涉及到专业领域数据源的采集、清洗和加工，模型的微调和训练、评估以及准确性验证，再到模型的应用构建和推广使用。</p><ul><li>数据的采集与清洗：整合应用系统运维日志和监控数据、故障案例、运维操作手册和应急手册、各软件产品的官方文档和维护手册（如Oracle手册、Kylin系统维护手册等）、应用和设备实例CMDB数据和拓扑关系数据，形成专有的运维知识库数据。</li><li>模型监督微调SFT：基于运维数据对DeepSeek R1进行微调，增强其对运维术语、流程和场景的理解，生成模拟运维场景的深度推理数据（如故障诊断步骤），结合人工标注形成高质量SFT（监督微调）数据集</li><li>模型强化学习：构建奖励模型比如运维任务的指标、知识的正确率等，通过PPO等算法进行强化学习，优化模型在复杂运维决策中的表现，同时避免生成违规操作建议</li><li>模型的部署与应用：框架构建本地运维知识库，将模型接入数据库和API，实现实时故障查询、自动化脚本生成等功能，并通过交互页面支持自然语言交互与多模态输入。</li></ul><p><img src="https://myim.kandy.us.kg/tutu/Qexo/25/2/bd518737be7cc09a6afabd4ffbe93456.webp"></p><p>上述的本地化模型的训练流程用其它大模型也可以完成，选择DeepSeek R1大模型的原因还是因为开源+训推低成本+强推理能力，简单对比如下：</p><p><img src="https://myim.kandy.us.kg/tutu/Qexo/25/2/235aba789e00e82685dc313fe6a6dfa0.webp"></p><h4 id="2、运维场景探讨"><a href="#2、运维场景探讨" class="headerlink" title="2、运维场景探讨"></a>2、运维场景探讨</h4><p>其实本地化的运维领域专业大模型是一个成本与收益的考量，如果花了大量的算力和人力成本去建设专用大模型，却不能有效解决复杂运维场景下的故障和应急的效率，那么这种大模型建设的意义就不大了。那么在实际的运维工作中，有哪些场景可以使用大模型进行优化，赋能运维工作带来效率的提升，下文列举了几种可能的场景进行探讨。</p><h5 id="2-1-构建智能的运维知识问答系统"><a href="#2-1-构建智能的运维知识问答系统" class="headerlink" title="2.1 构建智能的运维知识问答系统"></a>2.1 构建智能的运维知识问答系统</h5><p>运维知识库场景最容易落地实现，也切合目前大模型的文字处理和检索的能力，通过上下文的输入和理解，从模型数据中得到某个知识领域的专业解释或者处理流程，比如新的变更申请流程是怎样、数据库进程异常怎么应急处理等。这一类场景已经在通用大模型里已经通过交互式的方式使用，但是在运维相关的专业领域，需要专业的知识库去训练，方案实现上也相对比较成熟，实现难度在数据的预处理和清洗、模型的训练以及模型的准确性评估上。</p><p>以下是一个简要的构建流程：</p><p>1）阶段1：数据准备与知识库构建</p><ul><li><p>知识收集</p><ul><li>整合运维文档、工单记录、故障案例等数据，建议采用Markdown或结构化表格格式。</li><li>清洗数据，去除噪声（如日志冗余），标注关键实体（如服务器IP、错误代码）。</li></ul></li><li><p>知识向量化</p><ul><li>使用DeepSeek-R1的Embedding接口将文本转换为向量，采用动态分块策略（如按段落或语义分割）[4][6]。</li><li>存入向量数据库，优化索引参数（如HNSW层级）以提高召回率。</li></ul></li></ul><p>2）阶段2：模型部署与优化</p><ul><li><p>环境配置：本地化部署</p></li><li><p>模型增强</p><ul><li>领域适配：注入运维知识库数据，通过RAG动态检索与Prompts工程（如添加系统指令“你是一名资深DBA”）提升回答专业性。</li><li>性能优化：采用蒸馏技术生成轻量模型，或通过INT4量化降低推理延迟。</li></ul></li></ul><p>3）阶段3：系统集成与功能开发</p><ul><li><p>流程引擎搭建</p><ul><li>使用FlowiseAI或Anything-LLM配置对话链，集成模型服务、知识检索、上下文管理模块。</li><li>实现多轮对话记忆与溯源功能，支持答案关联知识片段引用。</li></ul></li><li><p>关键功能开发</p><ul><li>告警联动：对接运维监控系统，自动解析告警信息并触发知识检索。</li><li>主动诊断：基于动态思维链技术，引导模型自主拆解问题（如“CPU负载高→检查进程→分析日志”）。</li></ul></li></ul><p>4）阶段4：验证与迭代</p><ul><li><p>效果评估</p><ul><li>构建测试集覆盖高频场景（如慢SQL优化、容灾切换），通过人工评分+自动化指标（BLEU、ROUGE）量化准确率。</li><li>针对bad cases优化：调整分块策略、扩充知识库或增加拒绝回答机制。</li></ul></li><li><p>持续迭代</p><ul><li>建立反馈闭环：通过用户评分自动标注错误答案，定期微调模型。</li><li>知识库动态更新：设置定时任务同步最新运维文档，触发向量库增量更新。</li></ul></li></ul><h5 id="2-2-标准变更手册的编写及审核"><a href="#2-2-标准变更手册的编写及审核" class="headerlink" title="2.2 标准变更手册的编写及审核"></a>2.2 标准变更手册的编写及审核</h5><p>DeepSeek R1等大模型的脚本和程序的编写能力已经超过一般的开发人员，在运维工作中标准变更手册或脚本可以借助于大模型生成某个特定功能的脚本或者操作步骤，比如修改Kylin操作系统的参数、升级内核的步骤等，并且能够自动化检查脚本合规性（如高危命令rm、drop等）、优化逻辑缺陷，并生成标准化操作指南。不过由大模型生成的脚本或者步骤需要进一步验证后才能上实际的业务系统执行，毕竟准确性或者可靠性有待验证。</p><h5 id="2-3-基于告警生成对应的应急方案"><a href="#2-3-基于告警生成对应的应急方案" class="headerlink" title="2.3 基于告警生成对应的应急方案"></a>2.3 基于告警生成对应的应急方案</h5><p>当系统突发故障产生多维度告警（如CPU骤升、数据库等锁）时，人工诊断易延误处理。通过DeepSeek大模型可实时关联告警上下文，基于应用系统的拓扑架构、告警信息生成针对性应急处置方案和建议、告警的业务影响及影响范围等，再由运维人员进一步确认是否执行。简单的比如针对某一个软件的错误码生成对应操作对象的处理建议和步骤，更为复杂些是针对某个应用系统上下游的关联影响是否需要应用切流、限流甚至数据库切换等。</p><h5 id="2-4-基于事件处理流程及告警编写复盘报告"><a href="#2-4-基于事件处理流程及告警编写复盘报告" class="headerlink" title="2.4 基于事件处理流程及告警编写复盘报告"></a>2.4 基于事件处理流程及告警编写复盘报告</h5><p>在故障复盘环境，利用DeepSeek大模型根据登记的事件处理流程，结合自动采集事件时间轴（从首次告警到恢复确认）、相关日志片段、处置操作记录等，通过预训练的报告生成模型，按”故障影响-处理过程-根因分析-改进措施”框架组织内容，最终输出包含时间序列图、根因拓扑的可视化故障复盘报告。报告的编写和总结能力也是现在通用大模型的能力强项，实现难度上就是需要结合事件处理的过程去搜集和分析相关的日志和数据，并进行加工得到相对应的结论。</p><h5 id="2-5-强化数据库DDL和SQL审核"><a href="#2-5-强化数据库DDL和SQL审核" class="headerlink" title="2.5 强化数据库DDL和SQL审核"></a>2.5 强化数据库DDL和SQL审核</h5><p>在应用版本部署流程中集成DeepSeek审核插件，基于现有的SQL和DDL审核规则以及各类数据库的语法知识，对提交的SQL和DDL脚本进行多维度检测：1）语法层面检查是否符合目标数据库版本；2）性能层面预警全表扫描查询；3）安全层面识别明文密码或过度权限授予；4）DDL变更中表结构修改的停机影响，变更时长等。最终输出的审核结果以分级（阻塞&#x2F;警告）形式反馈至各个DBA和项目组。</p><p>以下是一个简要的构建流程：</p><p>1）核心模块组成</p><ul><li>规则知识库：通过R1的领域适应能力定制各个数据库专属审核规则（如索引规范、字段命名约束等）</li><li>语义解析层：利用R1的自然语言理解能力解析SQL语义上下文，支持跨语句关联审核</li><li>静态审核引擎：基于检索增强生成(RAG)技术，结合向量数据库实现规则匹配</li><li>动态分析层：对接MySQL元数据&#x2F;执行计划进行物理验证</li><li>优化建议模块：自动生成符合规范的SQL改写方案</li></ul><p>2）规则定制阶段</p><ul><li>使用R1解析数据库开发规范文档，自动生成可执行的审核规则模板，定制各个数据库的SQL和DDL审核规则</li><li>通过微调(fine-tuning)建立领域专用模型，支持识别业务特定模式（如金融行业账户编号规则）</li></ul><p>3）多维度审核</p><ul><li>静态审核：R1检索知识库验证命名规范、索引规则等</li><li>动态验证：检查实际库表存在性、外键约束等</li><li>性能预测：基于历史执行统计预测扫描行数&#x2F;索引利用率</li></ul><p>4）结果分级</p><ul><li>致命错误（如缺少主键）：直接阻断</li><li>警告建议（如未使用索引）：生成优化方案</li></ul><p>5）闭环管理</p><ul><li>自动生成包含修改建议的审核报告</li><li>通过API与工单系统对接，实现DDL&#x2F;DML流程自动化</li><li>构建反馈学习机制，持续优化审核规则库</li></ul><h5 id="2-6-信创数据库迁移改造中SQL转换"><a href="#2-6-信创数据库迁移改造中SQL转换" class="headerlink" title="2.6 信创数据库迁移改造中SQL转换"></a>2.6 信创数据库迁移改造中SQL转换</h5><p>在信创数据库迁移改造过程中，因为语法和语义上的差异，SQL和DDL语句的迁移准确率是各类国产数据库的痛点问题。利用DeepSeek大模型的能力，结合各类数据库的官方文档和SQL&#x2F;DDL语法规则，针对目标数据库进行SQL语法和表结构转换的优化，提高迁移转换的效率。比如对表结构迁移，解析源库的DDL后，自动调整数据类型（如NUMBER改为DECIMAL）、索引策略（如函数索引转虚拟列）、空字符串的处理，并对分区表等复杂结构生成兼容方案。转换完成后执行差分验证：通过自动生成测试用例对比源库与目标库的查询结果一致性，确保改造后功能无损。</p><p>其实这个场景各数据库厂商可以集成到自身的数据库迁移工具中完成，对于用户来说，只是在迁移改造的过程中使用到，是一个阶段性的工作。</p><h5 id="2-7-应用系统性能和容量评估"><a href="#2-7-应用系统性能和容量评估" class="headerlink" title="2.7 应用系统性能和容量评估"></a>2.7 应用系统性能和容量评估</h5><p>基于历史监控数据（CPU、内存、IO、存储等）训练时间序列预测模型，模拟不同负载场景下的资源消耗曲线。利用DeepSeek结合应用拓扑分析依赖链：例如识别出订单服务调用支付服务的TPS将突破当前线程池上限，进而推导出需扩容的Pod数量或服务器资源。对存储系统，通过采样分析表增长率与索引效率，预测半年后磁盘使用量是否达标。最终输出包含资源水位热力图、瓶颈组件列表及扩容建议的评估报告，支持动态阈值告警配置。基于这些容量评估报告和可视化指标对应用系统和服务器进行合理的扩缩容，以提高资源池的利用率。</p><h5 id="2-8-系统故障快速定位及根因分析"><a href="#2-8-系统故障快速定位及根因分析" class="headerlink" title="2.8 系统故障快速定位及根因分析"></a>2.8 系统故障快速定位及根因分析</h5><p>应用系统故障时候的问题快速定位以及根因分析是监控应急中最为关键的一个环节，也是最为复杂的场景。其中涉及到应用、系统、网络以及存储等软硬件各个组件，需要通过流式计算引擎实时聚合日志、性能指标、链路追踪数据，利用DeepSeek构建动态服务依赖图谱。当告警触发时，使用因果推理算法定位根因：例如某个应用交易耗时突增，通过分析上下游调用链，识别出底层分布式数据库集群某个分片服务器IO异常。同时结合历史相似故障案例进行模式匹配，给出概率化诊断结论（如90%可能性为数据库服务器IO异常）。最终基于应用拓扑视图，高亮显示故障传播路径和影响范围，并推荐数据库切换等应急处理动作。整个训练和推理的成本对算力的要求相当之高，而且对指标数据的实时性和准确性也有要求。</p><p>……还有更多运维场景……</p><h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><p>实际上，在运维场景中能够借助于DeepSeek等大模型的远不止上面这些，比如利用大模型对审计日志数据进行脱敏、终端操作日志进行研判分析、RAGFlow进行流程上的编排和操作等。但是是DeepSeek也好，还是其它的大模型，在运维场景的推广使用过程中，有以下几点是需要考虑的：</p><ol><li>成本和收益的考量：如果建设成本远远大于所能带来的收益，那么在评估建设的时候需要慎重考虑价值所在，而不是一味的跟风，大家都有那我也得有。比如在成本中考虑直接投入成本包括模型采购部署和定制化开发、运维支撑成本如数据处理维护和数据集成、风险控制成本如容错机制和合规性等；在收益中考虑人力成本的节约、故障处理时效、生产故障率、监管的合规审计成本以及潜在的运维能力提升和知识沉淀等。</li><li>大模型推理过程中的幻觉问题：有资料表示DeepSeek R1模型的幻觉率超过14%，远高于其它大模型。那么在使用大模型的过程中，就需要对出来的结果进行甄别或者验证，在认知以外的知识领域可能还需要不同的大模型去比对输出的结果，不然拿着“一本正经”的胡说八道，用到实际的业务场景或业务系统中，将会有不可预计的后果，比如运维过程中在生产系统执行了大模型生成错误的指令。所以上述讨论的运维场景有些也只是利用大模型作为一个参考，并不能直接拿来即用，更多的需要进行验证后才能使用，比如利用大模型生成的SQL或DDL语句，测试没问题后才会去到生产环境。</li></ol><blockquote><p>文章来源：<a href="https://mp.weixin.qq.com/s/h4sX-rWHqhAhPLdD8wspZA">https://mp.weixin.qq.com/s/h4sX-rWHqhAhPLdD8wspZA</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Mac 上批量打印多个 Word 文档</title>
      <link href="/2024/09/26/%E5%A6%82%E4%BD%95%E5%9C%A8%20Mac%20%E4%B8%8A%E6%89%B9%E9%87%8F%E6%89%93%E5%8D%B0%E5%A4%9A%E4%B8%AA%20Word%20%E6%96%87%E6%A1%A3/"/>
      <url>/2024/09/26/%E5%A6%82%E4%BD%95%E5%9C%A8%20Mac%20%E4%B8%8A%E6%89%B9%E9%87%8F%E6%89%93%E5%8D%B0%E5%A4%9A%E4%B8%AA%20Word%20%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在-Mac-上批量打印多个-Word-文档"><a href="#如何在-Mac-上批量打印多个-Word-文档" class="headerlink" title="如何在 Mac 上批量打印多个 Word 文档"></a>如何在 Mac 上批量打印多个 Word 文档</h1><p>由于 Mac 版的 Finder 没有像 Windows 那样直接批量打印的功能，本文将介绍如何使用 Automator 创建一个批量打印的工作流。</p><h2 id="步骤一：打开-Automator"><a href="#步骤一：打开-Automator" class="headerlink" title="步骤一：打开 Automator"></a>步骤一：打开 Automator</h2><ol><li>通过 Spotlight 搜索 “Automator” 或者”自动操作”并打开它。</li></ol><p><img src="https://myim.kandy.us.kg/tutu/Qexo/24/9/c8b3424fb96f2250cdeded5d0c3347f9.png" alt="https:&#x2F;&#x2F;myim.kandy.us.kg&#x2F;tutu&#x2F;Qexo&#x2F;24&#x2F;9&#x2F;c8b3424fb96f2250cdeded5d0c3347f9.png"></p><h2 id="步骤二：创建工作流程"><a href="#步骤二：创建工作流程" class="headerlink" title="步骤二：创建工作流程"></a>步骤二：创建工作流程</h2><ol><li>在 Automator 中，选择 “工作流程” 类型。</li></ol><p><img src="https://myim.kandy.us.kg/tutu/Qexo/24/9/cb96af416339c021ddfb4db871a60b17.png" alt="https:&#x2F;&#x2F;myim.kandy.us.kg&#x2F;tutu&#x2F;Qexo&#x2F;24&#x2F;9&#x2F;cb96af416339c021ddfb4db871a60b17.png"></p><h2 id="步骤三：添加文件"><a href="#步骤三：添加文件" class="headerlink" title="步骤三：添加文件"></a>步骤三：添加文件</h2><ol><li>在左侧的 “库” 中，找到 “文件和文件夹”。</li><li>将 “获取指定的 Finder 项目” 拖到右侧窗口。</li><li>在工作流中，点击 “添加…” 按钮，选择你要打印的多个 Word 文档。</li></ol><p><img src="https://myim.kandy.us.kg/tutu/Qexo/24/9/2aa1a72b9b8e1a614c0663351a649ff3.png" alt="https:&#x2F;&#x2F;myim.kandy.us.kg&#x2F;tutu&#x2F;Qexo&#x2F;24&#x2F;9&#x2F;2aa1a72b9b8e1a614c0663351a649ff3.png"></p><h2 id="步骤四：添加打印操作"><a href="#步骤四：添加打印操作" class="headerlink" title="步骤四：添加打印操作"></a>步骤四：添加打印操作</h2><ol><li>在左侧库中找到 “文档”。</li><li>将 “打印 Finder 项目” 拖到右侧窗口。</li></ol><p><img src="https://myim.kandy.us.kg/tutu/Qexo/24/9/7085d3237336f7c21d389a989a9f9fb5.png" alt="https:&#x2F;&#x2F;myim.kandy.us.kg&#x2F;tutu&#x2F;Qexo&#x2F;24&#x2F;9&#x2F;7085d3237336f7c21d389a989a9f9fb5.png"></p><h2 id="步骤五：保存和运行"><a href="#步骤五：保存和运行" class="headerlink" title="步骤五：保存和运行"></a>步骤五：保存和运行</h2><ol><li>保存工作流，给它起个容易记住的名字。</li><li>运行工作流。所有选中的 Word 文档将被自动打印。</li></ol><p><img src="https://myim.kandy.us.kg/tutu/Qexo/24/9/401c9656cc29b5b08796d4949e18a9ed.png" alt="https:&#x2F;&#x2F;myim.kandy.us.kg&#x2F;tutu&#x2F;Qexo&#x2F;24&#x2F;9&#x2F;401c9656cc29b5b08796d4949e18a9ed.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你可以轻松在 Mac 上批量打印多个 Word 文档。这种方法不仅节省了时间，还提高了工作效率。</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF 设置缓存，来加速你的博客网站</title>
      <link href="/2024/08/14/CF%20%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98%EF%BC%8C%E6%9D%A5%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2024/08/14/CF%20%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98%EF%BC%8C%E6%9D%A5%E5%8A%A0%E9%80%9F%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Cloudflare-CDN核心功能：资源缓存🚀🚀🚀"><a href="#Cloudflare-CDN核心功能：资源缓存🚀🚀🚀" class="headerlink" title="Cloudflare CDN核心功能：资源缓存🚀🚀🚀"></a>Cloudflare CDN核心功能：资源缓存🚀🚀🚀</h1><p>Cloudflare 是一种流行的内容分发网络（CDN），它在全球拥有大量的边缘服务器，可以帮助网站加速访问，提升安全性。本文将介绍 Cloudflare CDN 的核心功能之一：资源缓存，并详细说明如何进行配置。</p><p><img src="https://im.kandy.dpdns.org/file/5f3b880f2342b126ef9a7.png" alt="5f3b880f2342b126ef9a7"></p><h2 id="什么是资源缓存？"><a href="#什么是资源缓存？" class="headerlink" title="什么是资源缓存？"></a>什么是资源缓存？</h2><p>资源缓存是指将网站的静态资源（如图片、CSS、JavaScript 文件等）存储在 CDN 的边缘服务器上。当用户访问网站时，CDN 会从离用户最近的服务器提供资源，而不是从网站的原始服务器请求。这种方式可以大大减少加载时间，减轻原服务器的负担，同时提升用户的访问体验。</p><p>1.<strong>我们在不使用CDN时，网络链路应该是这样的。</strong><br>用户浏览器 –链接– 源站服务器 –返回– 用户浏览器</p><p><img src="https://im.kandy.dpdns.org/file/76ad1d165e18925cb63d9.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;76ad1d165e18925cb63d9.png"></p><p>2.<strong>使用CDN不缓存时的网络链路</strong><br>用户浏览器 –链接– CDN边缘节点 –链接– 源站服务器 –返回– CDN边缘节点 –返回– 用户浏览器<br>所以CDN不缓存时，网站是否加速取决于您的源站线路有多差劲。</p><p><img src="https://im.kandy.dpdns.org/file/7a322efaab7aa457c716a.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;7a322efaab7aa457c716a.png"></p><p>3.<strong>使用CDN缓存时的网络链路</strong></p><ul><li>第一次访问：用户浏览器 –链接– CDN边缘节点 –链接– 源站服务器 –返回– CDN边缘节点（此时会缓存资源到节点） –返回– 用户浏览器</li></ul><p><img src="https://im.kandy.dpdns.org/file/ac85abf125a8d44fd12de.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;ac85abf125a8d44fd12de.png"></p><ul><li>第二次访问：用户浏览器 –链接– CDN边缘节点（输出缓存） –返回– 用户浏览器<br>可以看到缓存后因为不必回源，因此用户请求CDN节点后，直接返回了网页，这样减少了回源的这段时间。</li></ul><p><img src="https://im.kandy.dpdns.org/file/ab51f82362391698a8845.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;ab51f82362391698a8845.png"></p><h2 id="Cloudflare-资源缓存的工作原理"><a href="#Cloudflare-资源缓存的工作原理" class="headerlink" title="Cloudflare 资源缓存的工作原理"></a>Cloudflare 资源缓存的工作原理</h2><ol><li><p><strong>首次访问和缓存填充</strong></p><ul><li>当用户第一次访问你的网站时，Cloudflare 的边缘服务器会向你的源服务器请求资源。此时，这些资源会被缓存到 Cloudflare 的服务器中。下一次有用户访问相同的资源时，Cloudflare 就会直接从缓存中提供数据，而不是再次请求源服务器。</li></ul></li><li><p><strong>缓存过期与刷新</strong></p><ul><li>每个缓存的资源都有一个过期时间（TTL，Time To Live），当资源的 TTL 到期后，Cloudflare 会向源服务器重新请求数据并更新缓存。此外，您还可以手动刷新缓存，确保用户始终获取最新的资源。</li></ul></li><li><p><strong>缓存级别设置</strong></p><ul><li>Cloudflare 允许您设置不同的缓存级别，例如标准缓存、无缓存或自定义缓存。您可以根据网站的需求调整这些设置，以确保最佳的性能和准确性。</li></ul></li></ol><h2 id="如何配置-Cloudflare-的缓存功能"><a href="#如何配置-Cloudflare-的缓存功能" class="headerlink" title="如何配置 Cloudflare 的缓存功能"></a>如何配置 Cloudflare 的缓存功能</h2><h3 id="自动缓存"><a href="#自动缓存" class="headerlink" title="自动缓存"></a>自动缓存</h3><p>默认情况下，Cloudflare 会自动缓存常见的静态文件类型，如图片、CSS、JavaScript 等,CloudFlare默认会缓存2小时以下资源，因此这些资源并不需要手动配置缓存。<br>.7z .csv .GIF .MIDI .PNG .TIF .ZIP<br>.AVI .DOC .GZ .MKV .PPT .TIFF .ZST<br>.AVIF .DOCX .ICO .MP3 .PPTX .TTF<br>.APK .DMG .ISO .MP4 .PS .WEBM<br>.BIN .EJS .JAR .OGG .RAR .WEBP<br>.BMP .EOT .JPG .OTF .SVG .WOFF<br>.BZ2 .EPS .JPEG .PDF .SVGZ .WOFF2<br>.CLASS .EXE .JS .PICT .SWF .XLS<br>.CSS .FLAC .MID .PLS .TAR.XLSX</p><h3 id="自定义缓存规则"><a href="#自定义缓存规则" class="headerlink" title="自定义缓存规则"></a>自定义缓存规则</h3><p>如果你有特定的资源需要自定义缓存策略，可以使用页面规则功能。以下是设置自定义缓存规则的步骤：</p><ol><li>在 Cloudflare 仪表板中选择你的网站域名。</li><li>点击左侧菜单中的“<strong>缓存-Cache Rules</strong>”选项。</li><li>点击“<strong>创建规则</strong>”按钮。</li></ol><p>你可以为不同的 URL 路径创建多个页面规则，以满足不同资源的缓存需求。</p><h4 id="缓存首页以及html页面"><a href="#缓存首页以及html页面" class="headerlink" title="缓存首页以及html页面"></a>缓存首页以及html页面</h4><p><img src="https://im.kandy.dpdns.org/file/0cf99b4b78f86de89bd04.png" alt="0cf99b4b78f86de89bd04"></p><h4 id="制定域名全站缓存（适合图床）"><a href="#制定域名全站缓存（适合图床）" class="headerlink" title="制定域名全站缓存（适合图床）"></a>制定域名全站缓存（适合图床）</h4><p><img src="https://im.kandy.dpdns.org/file/f51026d4cc4f61eee9a79.png" alt="f51026d4cc4f61eee9a79"></p><h4 id="设置缓存时间"><a href="#设置缓存时间" class="headerlink" title="设置缓存时间"></a>设置缓存时间</h4><p>建议：<br>浏览器TTL不要设置太长时间，否则网站更新后浏览器缓存更新不及时会带来很多问题。<br>边缘TTL可随意设置，如果设置的时间比较长，别忘记到cf控制台清理缓存。</p><p><img src="https://im.kandy.dpdns.org/file/826bae7cc1876a051604d.png" alt="826bae7cc1876a051604d"></p><h3 id="缓存清除"><a href="#缓存清除" class="headerlink" title="缓存清除"></a>缓存清除</h3><p>当你更新了网站内容，需要让用户立即看到最新的更改时，可以使用 Cloudflare 的缓存清除功能。以下是清除缓存的步骤：</p><ol><li>在 Cloudflare 仪表板中选择你的网站域名。</li><li>点击左侧菜单中的“<strong>缓存</strong>”选项。</li><li>在“<strong>概览</strong>”标签页下，点击“<strong>清除缓存</strong>”按钮。</li><li>选择“<strong>清除所有内容</strong>”或“<strong>自定义清除</strong>”，然后输入你想要清除的 URL。</li><li>点击“<strong>清除</strong>”按钮。</li></ol><p><img src="https://im.kandy.dpdns.org/file/fec12cc4b0061be72b026.png" alt="fec12cc4b0061be72b026"></p><p>选择性清除可以帮助你只刷新更新的资源，而不会影响到其他已缓存的内容。</p><h2 id="检查资源是否命中缓存"><a href="#检查资源是否命中缓存" class="headerlink" title="检查资源是否命中缓存"></a>检查资源是否命中缓存</h2><p>可以访问指定页面-右键-审核元素，打开调试控制台。HIT状态为缓存命中。</p><p><img src="https://im.kandy.dpdns.org/file/59421c39feef603e77127.png" alt="59421c39feef603e77127"></p><h2 id="资源缓存的优势"><a href="#资源缓存的优势" class="headerlink" title="资源缓存的优势"></a>资源缓存的优势</h2><ol><li><p><strong>提升网站速度</strong></p><ul><li>资源缓存可以显著减少网站的加载时间，尤其是对于全球用户分布广泛的网站。通过在靠近用户的边缘服务器上提供资源，访问速度大大提高。</li></ul></li><li><p><strong>减轻源服务器负载</strong></p><ul><li>由于大部分静态资源可以从缓存中直接提供，源服务器的负载会明显减少，从而降低服务器成本，延长服务器的寿命。</li></ul></li><li><p><strong>增强网站的可用性</strong></p><ul><li>即使源服务器发生故障，Cloudflare 仍然可以通过缓存提供资源，确保网站在一定程度上保持可访问性。</li></ul></li><li><p><strong>降低带宽消耗</strong></p><ul><li>通过减少向源服务器的请求次数，资源缓存也可以显著降低带宽消耗，从而降低网络成本。</li></ul></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Cloudflare 的资源缓存功能是提升网站性能的重要工具。通过合理配置和管理缓存策略，你可以为用户提供更快、更稳定的访问体验，同时减轻服务器负载，降低运营成本。如果你还没有充分利用 Cloudflare 的缓存功能，现在就是一个很好的时机去了解并配置它。</p><p>希望这篇博客能够帮助你更好地理解 Cloudflare CDN 的资源缓存功能，进而提升你的网站性能。</p><hr><p>如果你对 Cloudflare 的其他功能感兴趣，欢迎继续关注我们后续的内容。💡</p><blockquote><p><strong>感谢：<a href="https://www.baota.me/post-429.html" title="参考内容">gacjie</a></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cloudflare </category>
          
          <category> 网站优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 serv00 服务器上安装 Nezha Dashboard</title>
      <link href="/2024/08/12/%E5%9C%A8%20serv00%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85%20Nezha%20Dashboard/"/>
      <url>/2024/08/12/%E5%9C%A8%20serv00%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85%20Nezha%20Dashboard/</url>
      
        <content type="html"><![CDATA[<h1 id="在-serv00-服务器上安装-Nezha-Dashboard"><a href="#在-serv00-服务器上安装-Nezha-Dashboard" class="headerlink" title="在 serv00 服务器上安装 Nezha Dashboard"></a>在 serv00 服务器上安装 Nezha Dashboard</h1><p>在这篇博客中，我将指导你如何在 serv00 服务器上安装 Nezha 监控面板。请确保你已经具备以下前提条件，然后按照步骤进行操作。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在开始之前，请确保你已经具备以下条件：</p><ul><li>已拥有 serv00 服务器的 SSH 访问权限。</li></ul><h2 id="步骤-1-设置-serv00-管理页面"><a href="#步骤-1-设置-serv00-管理页面" class="headerlink" title="步骤 1: 设置 serv00 管理页面"></a>步骤 1: 设置 serv00 管理页面</h2><ol><li>使用 页面访问 serv00 服务器。比如<a href="https://panel8.serv00.com/login/?next=/">s8机器登陆地址</a></li><li>在左侧菜单栏中，点击 <strong>Additional services</strong>。</li><li>选择 <strong>Run your own applications</strong>，然后点击 <strong>Enable</strong>。</li></ol><p><img src="https://im.kandy.dpdns.org/file/47cb549c1a3f849f40696.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;47cb549c1a3f849f40696.png"></p><ol><li>找到 <strong>Port reservation</strong>，点击后面的 <strong>Add Port</strong>。</li><li>新开两个端口，随便输入，也可以点击 <strong>Port</strong> 后面的 <strong>Random</strong> 随机选择。<strong>Port type</strong> 选择 <strong>TCP</strong>。</li><li>点击 <strong>Port list</strong>，你将看到刚才创建的两个端口。</li></ol><p><img src="https://im.kandy.dpdns.org/file/397c3b9b1ff3ff2df3400.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;397c3b9b1ff3ff2df3400.png"></p><p>完成此步骤后，退出 SSH 并再次登录。</p><h2 id="步骤-2-一键安装-Nezha-监控面板"><a href="#步骤-2-一键安装-Nezha-监控面板" class="headerlink" title="步骤 2: 一键安装 Nezha 监控面板"></a>步骤 2: 一键安装 Nezha 监控面板</h2><p>现在，你可以通过以下命令一键安装 Nezha 监控面板：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s https://raw.githubusercontent.com/kandyhe/nezha4serv00/main/install-dashboard.sh)</span><br></pre></td></tr></table></figure><p>这将会自动下载并安装 Nezha 监控面板，过程可能需要几分钟时间。</p><p>安装交互输入详见<a href="https://nezha.wiki/guide/dashboard.html">zazhe官方安装教程</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你已经成功在 serv00 服务器上安装了 Nezha 监控面板。如果你在安装过程中遇到任何问题，欢迎在评论区留言，我会尽力帮助你</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过 GitHub 将 Hexo 博客发布到 Netlify</title>
      <link href="/2024/08/11/%E9%80%9A%E8%BF%87%20GitHub%20%E5%B0%86%20Hexo%20%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0%20Netlify/"/>
      <url>/2024/08/11/%E9%80%9A%E8%BF%87%20GitHub%20%E5%B0%86%20Hexo%20%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0%20Netlify/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-GitHub-将-Hexo-博客发布到-Netlify"><a href="#通过-GitHub-将-Hexo-博客发布到-Netlify" class="headerlink" title="通过 GitHub 将 Hexo 博客发布到 Netlify"></a>通过 GitHub 将 Hexo 博客发布到 Netlify</h1><p>在本篇文章中，我们将详细介绍如何将 Hexo 博客通过 GitHub 自动发布到 Netlify。Netlify 是一个强大的平台，用于自动部署和托管静态网站。结合 GitHub 和 Netlify，您可以实现持续部署，将每次博客更新自动发布到您的网站上。</p><p><img src="https://im.kandy.dpdns.org/file/9dac5b12e1e452ca90e38.png" alt="9dac5b12e1e452ca90e38"></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在开始之前，请确保您已经具备以下条件：</p><ol><li><strong>GitHub 账户</strong>：如果还没有，请访问 <a href="https://github.com/">GitHub 官网</a> 注册一个账户。</li><li><strong>Netlify 账户</strong>：访问 <a href="https://www.netlify.com/">Netlify 官网</a> 并创建一个账户。</li><li><strong>Hexo 博客项目</strong>：确保您已经创建并配置好 Hexo 博客。您可以参考 <a href="https://hexo.io/docs/">Hexo 官方文档</a> 来设置和管理您的博客。</li></ol><h2 id="步骤-1：准备-GitHub-仓库"><a href="#步骤-1：准备-GitHub-仓库" class="headerlink" title="步骤 1：准备 GitHub 仓库"></a>步骤 1：准备 GitHub 仓库</h2><ol><li><p>登录到您的 GitHub 账户。</p></li><li><p>创建一个新的仓库（例如 <code>my-hexo-blog</code>）。选择 <code>Public</code> 或 <code>Private</code> 权限，根据需要配置仓库设置。</p></li><li><p>将您的 Hexo 博客文件推送到这个仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> path/to/your/hexo/blog</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin &lt;YOUR_GITHUB_REPOSITORY_URL&gt;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>如果您已经有一个 Hexo 博客项目，并且之前已经在 GitHub 上创建了仓库，直接将项目推送到远程仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;YOUR_GITHUB_REPOSITORY_URL&gt;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤-2：配置-Hexo-博客的输出目录"><a href="#步骤-2：配置-Hexo-博客的输出目录" class="headerlink" title="步骤 2：配置 Hexo 博客的输出目录"></a>步骤 2：配置 Hexo 博客的输出目录</h2><p>Hexo 博客生成的静态文件默认存放在 <code>public</code> 目录。确保在 <code>hexo</code> 配置文件中设置好这个目录。通常不需要修改，但可以检查以下配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;YOUR_GITHUB_REPOSITORY_URL&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h2 id="步骤-3：连接-GitHub-仓库到-Netlify"><a href="#步骤-3：连接-GitHub-仓库到-Netlify" class="headerlink" title="步骤 3：连接 GitHub 仓库到 Netlify"></a>步骤 3：连接 GitHub 仓库到 Netlify</h2><ol><li>登录到您的 Netlify 账户。</li><li>在 Netlify 仪表板中，点击右上角的 <code>New site from Git</code> 按钮。</li><li>选择 <code>GitHub</code> 作为您的 Git 提供商，并授权 Netlify 访问您的 GitHub 账户。</li><li>从您的 GitHub 仓库列表中选择您刚刚创建的 Hexo 博客仓库，然后点击 <code>Deploy site</code>。</li></ol><h2 id="步骤-4：配置构建设置"><a href="#步骤-4：配置构建设置" class="headerlink" title="步骤 4：配置构建设置"></a>步骤 4：配置构建设置</h2><p>在 Netlify 自动部署页面，您需要配置构建设置：</p><ol><li><strong>Build command</strong>：输入 Hexo 的构建命令。通常是 <code>hexo generate</code> 或 <code>hexo g</code>。</li><li><strong>Publish directory</strong>：指定 Hexo 的输出目录，即 <code>public</code>。这告诉 Netlify 生成的静态文件在哪里。</li><li>点击 <code>Deploy site</code> 按钮，Netlify 将开始从您的 GitHub 仓库中拉取代码并构建您的网站。</li></ol><h2 id="步骤-5：配置域名（可选）"><a href="#步骤-5：配置域名（可选）" class="headerlink" title="步骤 5：配置域名（可选）"></a>步骤 5：配置域名（可选）</h2><ol><li>部署完成后，您将获得一个默认的 Netlify 域名。您可以在 Netlify 仪表板中查看并使用此域名。</li><li>如果您有自定义域名，可以在 Netlify 的 <code>Domain management</code> 部分添加您的域名，并按照指示完成域名配置。</li></ol><h2 id="步骤-6：自动部署设置"><a href="#步骤-6：自动部署设置" class="headerlink" title="步骤 6：自动部署设置"></a>步骤 6：自动部署设置</h2><p>Netlify 会自动检测到您 GitHub 仓库中的更改，并重新部署您的 Hexo 博客。每次您向 GitHub 仓库推送更改时，Netlify 都会自动更新您的网站。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上步骤，您已经成功将 Hexo 博客通过 GitHub 发布到 Netlify。Netlify 的持续部署功能确保每次博客更新都能自动反映在您的网站上。这种自动化的部署方式让您能够专注于博客内容的创作，而不必担心手动更新网站。</p><p>如果您在部署过程中遇到任何问题，请查阅 <a href="https://docs.netlify.com/">Netlify 文档</a> 或 <a href="https://hexo.io/docs/">Hexo 文档</a> 中获取更多帮助。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>serv00 和 ct8 注册快速注册</title>
      <link href="/2024/08/07/serv00%E6%B3%A8%E5%86%8C/"/>
      <url>/2024/08/07/serv00%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-ProxySite-进行-serv00-和-ct8-注册"><a href="#使用-ProxySite-进行-serv00-和-ct8-注册" class="headerlink" title="使用 ProxySite 进行 serv00 和 ct8 注册"></a>使用 ProxySite 进行 serv00 和 ct8 注册</h1><p>在本教程中，我们将介绍如何通过 ProxySite 免费网络代理完成 serv00 和 ct8 的注册过程。通过以下步骤，您将能够轻松注册并获得免费账号。</p><p><img src="https://im.kandy.dpdns.org/file/1dfd0a6e7348d3d5971d2.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;1dfd0a6e7348d3d5971d2.png"></p><h2 id="步骤-1：打开-ProxySite"><a href="#步骤-1：打开-ProxySite" class="headerlink" title="步骤 1：打开 ProxySite"></a>步骤 1：打开 ProxySite</h2><ol><li>访问 ProxySite 的官方网站：<a href="https://www.lumiproxy.com/zh-hans/online-proxy/proxysite/">proxysite-网络代理点我</a></li><li>在动态安全浏览下方的输入框中输入以下网址：<ul><li>注册 serv00：<a href="https://www.serv00.com/offer/create_new_account">https://www.serv00.com/offer/create_new_account</a></li><li>注册 ct8：<a href="https://www.ct8.pl/offer/create_new_account">https://www.ct8.pl/offer/create_new_account</a>选择代理地址为 🇵🇱 波兰</li></ul></li></ol><p><img src="https://im.kandy.dpdns.org/file/fc0e4c6613b358d76501b.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;fc0e4c6613b358d76501b.png"></p><h2 id="步骤-2：获取临时邮箱地址"><a href="#步骤-2：获取临时邮箱地址" class="headerlink" title="步骤 2：获取临时邮箱地址"></a>步骤 2：获取临时邮箱地址</h2><ol><li>打开一个临时邮箱服务，例如：<a href="https://22.do/">临时邮箱</a></li><li>复制临时邮箱地址，以便在注册过程中使用</li></ol><p><img src="https://im.kandy.dpdns.org/file/27d8cadaca033c35f471e.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;27d8cadaca033c35f471e.png"></p><h2 id="步骤-3：注册-serv00"><a href="#步骤-3：注册-serv00" class="headerlink" title="步骤 3：注册 serv00"></a>步骤 3：注册 serv00</h2><ol><li>在 ProxySite 中打开的 serv00 注册页面，填写所需信息，包括临时邮箱地址</li><li>在最下面一栏填写 <code>free</code></li><li>点击创建账户</li><li>无需理会返回页面的信息，直接查看临时邮箱内容，激活账号</li></ol><h2 id="步骤-4：注册-ct8"><a href="#步骤-4：注册-ct8" class="headerlink" title="步骤 4：注册 ct8"></a>步骤 4：注册 ct8</h2><ol><li>在 ProxySite 中打开的 ct8 注册页面，填写所需信息，包括临时邮箱地址</li><li>在最下面一栏填写 <code>MyDevil.net</code></li><li>点击创建账户</li><li>无需理会返回页面的信息，直接查看临时邮箱内容，激活账号</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过 ProxySite 的免费代理，您可以轻松完成 serv00 和 ct8 的注册过程，并获得免费账号。使用临时邮箱可以确保您的隐私安全。如果遇到任何问题，请随时留言。</p><p>😊 Happy surfing!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过 VS Code 管理项目并推送到 GitHub 🚀</title>
      <link href="/2024/08/07/%E9%80%9A%E8%BF%87%20VS%20Code%20%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%20GitHub%20%F0%9F%9A%80/"/>
      <url>/2024/08/07/%E9%80%9A%E8%BF%87%20VS%20Code%20%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%20GitHub%20%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-VS-Code-管理项目并推送到-GitHub-🚀"><a href="#通过-VS-Code-管理项目并推送到-GitHub-🚀" class="headerlink" title="通过 VS Code 管理项目并推送到 GitHub 🚀"></a>通过 VS Code 管理项目并推送到 GitHub 🚀</h1><p>在这篇文章中，我们将逐步讲解如何通过 Visual Studio Code (VS Code) 的图形界面来完成 Git 配置、初始化本地 Git 仓库、提交更改，并将项目推送到 GitHub。所有操作都将通过直观的图形界面完成，无需使用命令行。</p><p><img src="https://im.kandy.dpdns.org/file/3421dabef042947b64cbe.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;3421dabef042947b64cbe.png"></p><h2 id="1-配置-Git-用户信息-⚙️"><a href="#1-配置-Git-用户信息-⚙️" class="headerlink" title="1. 配置 Git 用户信息 ⚙️"></a>1. 配置 Git 用户信息 ⚙️</h2><ol><li><p><strong>打开 VS Code</strong>：启动 VS Code 应用程序。</p></li><li><p><strong>访问设置</strong>：</p><ul><li>点击左下角的齿轮图标（⚙️），然后选择 <strong>设置</strong>，或使用快捷键 <code>Ctrl + ,</code>。</li></ul></li><li><p><strong>搜索 Git 设置</strong>：</p><ul><li>在设置面板的搜索框中，输入 <code>Git</code>，然后找到 <strong>Git: User Name</strong> 和 <strong>Git: User Email</strong> 设置项。</li></ul></li><li><p><strong>输入用户信息</strong>：</p><ul><li>在 <strong>Git: User Name</strong> 和 <strong>Git: User Email</strong> 中，输入你的 Git 用户名和电子邮件地址。例如：<ul><li><strong>Git: User Name</strong>: <code>你的用户名</code></li><li><strong>Git: User Email</strong>: <code>你的邮箱@example.com</code></li></ul></li></ul><p>如果这些选项不可用，可以通过命令面板进行配置：</p><ul><li>打开命令面板（<code>Ctrl + Shift + P</code>），输入并选择 <strong>Git: Configure User Name</strong> 和 <strong>Git: Configure User Email</strong>，然后按照提示输入相关信息。</li></ul></li></ol><p><img src="https://im.kandy.dpdns.org/file/05c6bdfaf8c070fe2751b.png" alt="https:&#x2F;&#x2F;im.kandy.dpdns.org&#x2F;file&#x2F;05c6bdfaf8c070fe2751b.png"></p><h2 id="2-初始化本地-Git-仓库-📦"><a href="#2-初始化本地-Git-仓库-📦" class="headerlink" title="2. 初始化本地 Git 仓库 📦"></a>2. 初始化本地 Git 仓库 📦</h2><ol><li><p><strong>打开你的项目</strong>：在 VS Code 中，打开你想要初始化为 Git 仓库的项目文件夹。</p></li><li><p><strong>访问源代码管理视图</strong>：</p><ul><li>点击左侧活动栏中的 <strong>源代码管理</strong> 图标（一个分支图标）。</li></ul></li><li><p><strong>初始化仓库</strong>：</p><ul><li>如果项目尚未初始化为 Git 仓库，源代码管理视图顶部会显示 <strong>初始化仓库</strong> 按钮。点击此按钮，VS Code 会自动在你的项目目录中创建一个 <code>.git</code> 文件夹，标志着项目已经成为 Git 仓库。</li></ul></li><li><p><strong>查看本地更改</strong>：</p><ul><li>仓库初始化后，你会在源代码管理视图中看到所有未跟踪的文件。这些文件在本地已被标记为未提交状态。</li></ul></li></ol><h2 id="3-提交文件-✏️"><a href="#3-提交文件-✏️" class="headerlink" title="3. 提交文件 ✏️"></a>3. 提交文件 ✏️</h2><ol><li><p><strong>选择文件</strong>：</p><ul><li>在 <strong>源代码管理</strong> 视图中，你会看到未跟踪的文件列表。点击文件名旁边的 <strong>+</strong> 按钮将其添加到暂存区。</li></ul></li><li><p><strong>添加到暂存区</strong>：</p><ul><li>你可以逐个选择文件，或点击 <strong>阶段所有变更</strong> 来将所有文件添加到暂存区。</li></ul></li><li><p><strong>输入提交信息</strong>：</p><ul><li>在 <strong>源代码管理</strong> 视图中，顶部有一个提交消息框。在框中输入描述性的信息，例如 “首次提交”。</li></ul></li><li><p><strong>提交更改</strong>：</p><ul><li>输入提交信息后，点击提交按钮（通常是一个勾号图标 ✅），完成提交操作。</li></ul></li></ol><h2 id="4-将项目推送到-GitHub-🌐"><a href="#4-将项目推送到-GitHub-🌐" class="headerlink" title="4. 将项目推送到 GitHub 🌐"></a>4. 将项目推送到 GitHub 🌐</h2><ol><li><p><strong>创建 GitHub 仓库</strong>：</p><ul><li>登录到你的 GitHub 账户，点击右上角的 <strong>+</strong> 按钮，选择 <strong>New repository</strong>。</li><li>输入仓库名称和描述，然后点击 <strong>Create repository</strong>。记下仓库的 URL，例如 <code>https://github.com/your-username/your-repository.git</code>。</li></ul></li><li><p><strong>添加远程仓库</strong>：</p><ul><li>回到 VS Code，点击左侧活动栏中的 <strong>源代码管理</strong> 图标。</li><li>点击顶部的 <strong>更多操作</strong> 按钮（省略号 <code>...</code>），选择 <strong>添加远程</strong>。</li><li>在弹出的对话框中，输入远程仓库的名称（通常是 <code>origin</code>）和 URL。点击 <strong>确定</strong>。</li></ul></li><li><p><strong>推送更改</strong>：</p><ul><li>在 <strong>源代码管理</strong> 视图中，点击顶部的 <strong>同步</strong> 按钮 🔄。VS Code 将会把你的本地提交推送到 GitHub，并从远程仓库拉取最新更改（如果有的话）。</li></ul></li><li><p><strong>设置默认推送分支</strong>（如果需要）：</p><ul><li>点击 <strong>更多操作</strong> 按钮，选择 <strong>推送到</strong>，然后选择你要推送的分支（通常是 <code>main</code> 或 <code>master</code>）。这会将本地分支与远程分支关联起来。</li></ul></li></ol><h2 id="5-检查推送结果-✅"><a href="#5-检查推送结果-✅" class="headerlink" title="5. 检查推送结果 ✅"></a>5. 检查推送结果 ✅</h2><ol><li><p><strong>查看推送状态</strong>：</p><ul><li>在 VS Code 的 <strong>源代码管理</strong> 视图中，检查推送操作的状态。如果一切正常，你的提交将会显示在 GitHub 仓库的提交历史中。</li></ul></li><li><p><strong>验证 GitHub 上的更改</strong>：</p><ul><li>打开 GitHub 仓库页面，检查是否能看到你刚刚推送的提交和文件。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你可以完全通过 VS Code 的图形界面来完成 Git 配置、初始化本地 Git 仓库、提交更改以及将项目推送到 GitHub。这种方法非常适合那些更喜欢图形界面的用户，而不是使用命令行。</p><p>希望这篇文章对你有所帮助！如果你有任何问题或需要更多的细节，请随时留言 💬。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客教程</title>
      <link href="/2024/08/04/GitHub%20+%20Gridea%20+%20Cloudflare%20%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%20%F0%9F%9A%80/"/>
      <url>/2024/08/04/GitHub%20+%20Gridea%20+%20Cloudflare%20%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%20%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<p>建立个人网站可以展示你的作品、分享你的想法，还可以作为个人简历的一部分。本文将详细指导你如何使用 GitHub、Gridea 和 Cloudflare 来搭建一个免费且高效的个人网站。</p><hr><h4 id="步骤一：准备工作-🛠️"><a href="#步骤一：准备工作-🛠️" class="headerlink" title="步骤一：准备工作 🛠️"></a>步骤一：准备工作 🛠️</h4><ol><li><p>**注册 GitHub 账号** ✍️</p><ul><li>访问 <a href="https://github.com/">GitHub</a> 并创建一个新账号。</li></ul></li></ol><p><img src="https://im.kandy.dpdns.org/file/8358dde9faa919bbaa206.png" alt="github注册"></p><ul><li>创建一个新的仓库，命名为 `username.github.io`，其中 `username` 是你的 GitHub 用户名。</li></ul><p><img src="https://im.kandy.dpdns.org/file/32dcfa2d9a51201c54cfb.png" alt="创建仓库"></p><ol start="2"><li><p>**安装 Gridea** 💻</p><ul><li>访问 <a href="https://open.gridea.dev/">Gridea</a> 并下载适合你操作系统的版本。</li><li>安装并打开 Gridea，进行初始设置。</li></ul></li></ol><p><img src="https://im.kandy.dpdns.org/file/0feb3ba7fa240d576b0c9.png" alt="Gridea"></p><hr><h4 id="步骤二：配置-Gridea-📝"><a href="#步骤二：配置-Gridea-📝" class="headerlink" title="步骤二：配置 Gridea 📝"></a>步骤二：配置 Gridea 📝</h4><ol><li><p>**创建博客** 🌐</p><ul><li>在 Gridea 中，点击“新建博客”并输入你的博客名称。</li></ul></li><li><p>**配置 GitHub 仓库** 🔧</p><ul><li>进入 Gridea 的“设置”页面，选择“远程”。</li><li>选择 GitHub 作为发布平台，填写仓库地址（如 `<a href="https://github.com/username/username.github.io/%60%EF%BC%89%E5%92%8C%E5%88%86%E6%94%AF%EF%BC%88%E9%80%9A%E5%B8%B8%E4%B8%BA">https://github.com/username/username.github.io\`）和分支（通常为</a> `main` 或 `master`）。</li><li>输入你的 GitHub 用户名和生成的个人访问令牌（PAT）。令牌可以在 GitHub 的“Settings” -&gt; “Developer settings” -&gt; “Personal access tokens” 生成。</li><li>生成令牌时，确保选择 `repo` 权限，以便 Gridea 能够访问和更新你的仓库。</li></ul></li><li><p>**编写博客文章** ✏️</p><ul><li>在 Gridea 中，点击“新建文章”开始写作。</li><li>添加标题、标签和正文内容。你可以在正文中使用 Markdown 语法来格式化文本。</li><li>完成后点击“发布”，Gridea 会自动将文章推送到你的 GitHub 仓库。</li></ul></li></ol><hr><h4 id="步骤三：配置-Cloudflare-☁️"><a href="#步骤三：配置-Cloudflare-☁️" class="headerlink" title="步骤三：配置 Cloudflare ☁️"></a>步骤三：配置 Cloudflare ☁️</h4><ol><li><p>**注册 Cloudflare 账号** ✍️</p><ul><li>访问 <a href="https://www.cloudflare.com/">Cloudflare</a> 并创建一个新账号。</li></ul></li><li><p>**添加站点** ➕</p><ul><li>登录 Cloudflare 后，点击“Add a Site”并输入你的域名（如 `username.github.io`）。</li><li>Cloudflare 会自动扫描你的 DNS 记录。确认无误后，继续下一步。</li></ul></li><li><p>**更改域名服务器** 🌐</p><ul><li>Cloudflare 会提供两个新的域名服务器。登录你的域名注册商（如 GoDaddy 或 Namecheap），将原有的域名服务器更改为 Cloudflare 提供的。</li></ul></li><li><p>**配置 HTTPS** 🔒</p><ul><li>在 Cloudflare 的“SSL&#x2F;TLS”设置中，选择“Full”模式，确保你的网站通过 HTTPS 安全访问。</li><li>你也可以启用 HSTS (HTTP Strict Transport Security) 以增加安全性。</li></ul></li></ol><hr><h4 id="步骤四：检查与发布-🔍"><a href="#步骤四：检查与发布-🔍" class="headerlink" title="步骤四：检查与发布 🔍"></a>步骤四：检查与发布 🔍</h4><ol><li><p>**检查网站** ✅</p><ul><li>等待几分钟后，访问 `<a href="https://username.github.io/%60">https://username.github.io\`</a> 检查你的网站是否正常显示。</li><li>确保所有链接、图片和资源都正常加载。</li></ul></li><li><p>**发布网站** 🚀</p><ul><li>当你对网站的内容满意后，可以通过 Gridea 继续发布新文章，所有更改都会自动同步到 GitHub 并通过 Cloudflare 加速访问。</li></ul></li></ol><hr><p>通过以上步骤，你就成功搭建了一个通过 GitHub、Gridea 和 Cloudflare 构建的个人网站。这个过程不仅免费，还能让你享受到全球加速的快速访问体验。希望你能通过这个平台更好地展示自己的作品和想法！</p><hr><p>如果有任何问题或需要进一步的帮助，请随时留言。Happy blogging! 🎉</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
